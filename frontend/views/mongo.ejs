<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mongo Query Results</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(to right, #74ebd5, #acb6e5);
            color: #333;
            text-align: center;
        }
        table {
            width: 80%;
            margin: 20px auto;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #4CAF50;
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        .container {
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body>
<div class="container">
   
    <% if (typeof data != "undefined" && data.length > 0) { %>
        <table>
            <tr>
                <% Object.keys(data[0]).forEach(function(key) { %>
                    <th><%= key %></th>
                <% }); %>
            </tr>
            <% data.forEach(function(row) { %>
                <tr>
                    <% Object.keys(row).forEach(function(key) { %>
                        <td><%= row[key] %></td>
                    <% }); %>
                </tr>
            <% }); %>
        </table>
    <% } else { %>
        <p>No data found or query did not return any results.</p>
    <% } %>

</div>

<div id="chartContainer" style="width: 1800px; height: 700px;
 display: flex; justify-content: center; align-items: center;">
    <canvas id="myChart"></canvas>
</div>

<div id="chartContainer2" style="width: 1800px; height: 700px; margin-top: 300px;
 display: flex; justify-content: center; align-items: center;">
    <canvas id="myChart_sub1"></canvas>
    <canvas id="myChart_sub2"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    try
    {
        var dataFromServer = JSON.parse('<%- JSON.stringify(data) %>'.replace(/\r/g,""));
       
    }catch(error)
    {
        var dataFromServer = '<%- JSON.stringify(data) %>'.replace(/\\n|"/g, " ")
        .replace(/\s+/g, " ").replace(/"\s+/g, '"').replace(/(\w+)\s*:/g, '"$1":')
        .replace(/:\s*([^,{\[]+)/g, ':"$1"').replace(/only"/g, 'only')
        .replace(/(\d+)\}"/g, '$1"}')
        .replace(/(\d+)\}]"/g, '$1"}]')
        .replace(/ hospic ,/g, ' hospic ",');
        dataFromServer =  JSON.parse(dataFromServer)
    }finally
    {
        labels = Object.keys(dataFromServer[0]);
        var values = []
        var yValues = []
        for (let i = 0; i < dataFromServer.length; i++) 
            {
                const element = dataFromServer[i][labels[2]];
                const yelement = dataFromServer[i][labels[0]];
                values.push(element)
                yValues.push(yelement)
            }
    }
    
    if (labels[2]==="gender" && labels[1] === "discharge_disposition")
    {
        var labels_gender = []
        var labels_descriptions = []
        for (let i = 0; i < dataFromServer.length; i++) 
        {
            const element1 = dataFromServer[i][labels[1]]
            const element2 = dataFromServer[i][labels[2]]
            if (!labels_descriptions.includes(element1)) 
            {
                labels_descriptions.push(element1);
            }
            if (!labels_gender.includes(element2)) 
            {
                labels_gender.push(element2);
            }
        }

        if (labels_descriptions.length === 26)
        {   
            labels_gender.pop()
            labels_descriptions_new = ["died",
                                        "Recover",
                                        "transferred  to other hosptial",
                                        "transferred to home",
                                        "transferred to ICF",
                                        "transferred to SNF",
                                        "Left AMA",
                                        ]
        
        rows = labels_gender.length
        cols = labels_descriptions.length
        var dynamicArray = new Array(rows);
        for (var i = 0; i < rows; i++) {
            dynamicArray[i] = new Array(cols);
        }        
        console.log(dataFromServer)
        for (let i = 0; i < rows; i++) {
            for (let j = 0; j < cols; j++) {
                dynamicArray[i][j] = 0
            } 
        }
        for (let j = 0; j < labels_gender.length; j++) 
        {   
            var temp = 0
            for (let i = 0; i < dataFromServer.length; i++)
            {
                if (dataFromServer[i]["gender"] === labels_gender[j])
                {
                    temp += parseFloat(dataFromServer[i]["count"]) 
                }
            }   
            for (let k = 0; k < labels_descriptions.length; k++)
                {   for (let i = 0; i < dataFromServer.length; i++)
                        {
                            if (dataFromServer[i]['discharge_disposition'] === labels_descriptions[k] &&
                         dataFromServer[i]['gender'] === labels_gender[j])
                         {
                            dynamicArray[j][k] = parseFloat(dataFromServer[i]["count"]) 
                         }

                        }
                }
                console.log(temp)
            for (let i = 0; i < labels_descriptions.length; i++)
            {   if (dynamicArray[j][i] != 0)
                dynamicArray[j][i]/= temp
            }     
        }
        var female_lable_new = new Array(7)
        for (let i = 0; i < female_lable_new.length; i++) {
            female_lable_new[i] = 0
        }
        female_lable_new[0] += dynamicArray[0][6]
        female_lable_new[1] += dynamicArray[0][0]
        female_lable_new[2] += dynamicArray[0][4] +dynamicArray[0][5]
        female_lable_new[3] += dynamicArray[0][2] + dynamicArray[0][14] 
        female_lable_new[4] += dynamicArray[0][9]
        female_lable_new[5] += dynamicArray[0][1]
        female_lable_new[6] += dynamicArray[0][10]
        var temp = 0

        for (let i = 0; i < female_lable_new.length; i++) 
        {
            temp += female_lable_new[i]
            
        }
        for (let i = 0; i < female_lable_new.length; i++) 
        {
            female_lable_new[i] /= temp    
        }
        var male_lable_new = new Array(7)
        for (let i = 0; i < male_lable_new.length; i++) {
            male_lable_new[i] = 0
        }
        male_lable_new[0] += dynamicArray[1][6]
        male_lable_new[1] += dynamicArray[1][0]
        male_lable_new[2] += dynamicArray[1][4] +dynamicArray[1][5]
        male_lable_new[3] += dynamicArray[1][2] + dynamicArray[1][14] 
        male_lable_new[4] += dynamicArray[1][9]
        male_lable_new[5] += dynamicArray[1][1]
        male_lable_new[6] += dynamicArray[1][10]
        var temp = 0
        for (let i = 0; i < male_lable_new.length; i++) 
        {
            temp += male_lable_new[i]
            
        }
        for (let i = 0; i < male_lable_new.length; i++) 
        {
            male_lable_new[i] /= temp    
        }
        var ctx = document.getElementById('myChart').getContext('2d');
        console.log(male_lable_new)
        console.log(female_lable_new)
        var myChart = new Chart(ctx, {
        type: 'pie',
        data: {
             labels: labels_gender,
            // backgroundColor : ["red","yellow"],
            datasets: [
                {
                    label: labels_descriptions_new[0],
                    backgroundColor: ['rgba(255, 0, 0, 0.5)','rgba(255, 0, 0, 1)'],
                    data: [female_lable_new[0],male_lable_new[0]]
                },
                {
                    label: labels_descriptions_new[1],
                    backgroundColor: ['rgba(0, 128, 0, 0.5)','rgba(0, 128, 0, 1)'],
                    data: [female_lable_new[1],male_lable_new[1]]
                },
                {
                    label: labels_descriptions_new[2],
                    backgroundColor: ['rgba(255, 192, 203, 0.5)','rgba(255, 192, 203,1)'],
                    data: [female_lable_new[2],male_lable_new[2]]
                },
                {
                    label: labels_descriptions_new[3],
                    backgroundColor: ['rgba(128, 128, 128, 0.5)','rgba(128, 128, 128, 1)'],
                    data: [female_lable_new[3],male_lable_new[3]]
                },
                {
                    label: labels_descriptions_new[4],
                    backgroundColor: ['rgba(255, 255, 255, 0.5)','rgba(255, 255, 255,1)'],
                    data: [female_lable_new[4],male_lable_new[4]]
                },
                {
                    label: labels_descriptions_new[5],
                    backgroundColor: ['rgba(0, 0, 0, 0.5)','rgba(0, 0, 0, 1)'],
                    data: [female_lable_new[5],male_lable_new[5]]
                },
                {
                    label: labels_descriptions_new[6],
                    backgroundColor: ['rgba(255, 255, 0, 0.5)','rgba(255, 255, 0,1)'],
                    data: [female_lable_new[6],male_lable_new[6]]
                },
            ]
        },
        options: {
            animation: {
            duration: 2000,
            easing: 'easeInOutQuad',
            cutoutPercentage: 0,
        },
        scales: {
            x: {
                stacked: true
            },
            y: {
                stacked: true
            }
        }
        }
    })
    var ctx1 = document.getElementById('myChart_sub1').getContext('2d');
            var myChart_sub1 = new Chart(ctx1, {
            type: 'polarArea',
            data: {
                labels: labels_descriptions_new,
                // backgroundColor : ["red","yellow"],
                datasets: [{
                label: 'Female', 
                backgroundColor: ['rgba(255, 0, 0, 0.5)', 'rgba(0, 128, 0, 0.5)', 'rgba(255, 192, 203, 1)', 'rgba(128, 128, 128, 1)', 'rgba(255, 255, 255, 1)', 'rgba(0, 0, 0, 1)', 'rgba(255, 255, 0, 1)', 'rgba(125, 55, 77, 1)', 'rgba(255, 66, 88, 1)'], // 设置颜色数组
                data: female_lable_new 
                
            }]
            },
            options: {
                animation: {
                duration: 2000,
                easing: 'easeInOutQuad',
                cutoutPercentage: 0,
            },
            
            }
        })
        var ctx2 = document.getElementById('myChart_sub2').getContext('2d');
            var myChart_sub2 = new Chart(ctx2, {
            type: 'polarArea',
            data: {
                labels: labels_descriptions_new,
                // backgroundColor : ["red","yellow"],
                datasets: [{
                label: 'Male', 
                backgroundColor: ['rgba(255, 0, 0, 0.5)', 'rgba(0, 128, 0, 0.5)', 'rgba(255, 192, 203, 1)', 'rgba(128, 128, 128, 1)', 'rgba(255, 255, 255, 1)', 'rgba(0, 0, 0, 1)', 'rgba(255, 255, 0, 1)', 'rgba(125, 55, 77, 1)', 'rgba(255, 66, 88, 1)'], // 设置颜色数组
                data: male_lable_new 
                
            }]
            },
            options: {
                animation: {
                duration: 2000,
                easing: 'easeInOutQuad',
                cutoutPercentage: 0,
            },
            
            }
        })
            

        }}
    else if (labels[2] === "gender" && labels[1] === "admission_source")
    {       
        var labels_gender = []
        var labels_descriptions = []
        for (let i = 0; i < dataFromServer.length; i++) 
        {
            const element1 = dataFromServer[i][labels[1]]
            const element2 = dataFromServer[i][labels[2]]
            if (!labels_descriptions.includes(element1)) 
            {
                labels_descriptions.push(element1);
            }
            if (!labels_gender.includes(element2)) 
            {
                labels_gender.push(element2);
            }
        }
            labels_gender.pop()
            labels_descriptions_new = ["Court/Law Enforcement",
                                        "Emergency Room",
                                        "Unknow",
                                        "Physician Referral",
                                        "Transfer from a Skilled Nursing Facility (SNF)",
                                        "Transfer from another health care facility",
                                        "Clinic Referral",
                                        "HMO Referral",
                                        "Transfer from a hospital"]

        console.log(labels_descriptions)
        rows = labels_gender.length
        cols = labels_descriptions.length
        var dynamicArray = new Array(rows);
        for (var i = 0; i < rows; i++) {
            dynamicArray[i] = new Array(cols);
        }        
        for (let i = 0; i < rows; i++) {
            for (let j = 0; j < cols; j++) {
                dynamicArray[i][j] = 0
            } 
        }
        for (let j = 0; j < labels_gender.length; j++) 
        {   
            var temp = 0
            for (let i = 0; i < dataFromServer.length; i++)
            {
                if (dataFromServer[i]["gender"] === labels_gender[j])
                {
                    temp += parseFloat(dataFromServer[i]["count"]) 
                }
            }   
            for (let k = 0; k < labels_descriptions.length; k++)
                {   for (let i = 0; i < dataFromServer.length; i++)
                        {
                            if (dataFromServer[i]['admission_source'] === labels_descriptions[k] &&
                         dataFromServer[i]['gender'] === labels_gender[j])
                         {
                            dynamicArray[j][k] = (dataFromServer[i]["count"]) 
                         }

                        }
                }
            for (let i = 0; i < labels_descriptions.length; i++)
            {   if (dynamicArray[j][i] != 0)
                dynamicArray[j][i]/= temp
            }     
        }
        console.log(dynamicArray)
        var female_lable_new = new Array(9)
        for (let i = 0; i < female_lable_new.length; i++) {
            female_lable_new[i] = 0
        }
        female_lable_new[0] += dynamicArray[0][10]
        female_lable_new[1] += dynamicArray[0][0]
        female_lable_new[2] += dynamicArray[0][2]
        female_lable_new[3] += dynamicArray[0][1] 
        female_lable_new[4] += dynamicArray[0][6]
        female_lable_new[5] += dynamicArray[0][4]
        female_lable_new[6] += dynamicArray[0][5]
        female_lable_new[7] += dynamicArray[0][8]
        female_lable_new[8] += dynamicArray[0][3]
        var temp = 0

        for (let i = 0; i < female_lable_new.length; i++) 
        {
            temp += female_lable_new[i]
            
        }
        for (let i = 0; i < female_lable_new.length; i++) 
        {
            female_lable_new[i] /= temp    
        }
        var male_lable_new = new Array(9)
        for (let i = 0; i < male_lable_new.length; i++) {
            male_lable_new[i] = 0
        }
        male_lable_new[0] += dynamicArray[1][10]
        male_lable_new[1] += dynamicArray[1][0]
        male_lable_new[2] += dynamicArray[1][2]
        male_lable_new[3] += dynamicArray[1][1] 
        male_lable_new[4] += dynamicArray[1][6]
        male_lable_new[5] += dynamicArray[1][4]
        male_lable_new[6] += dynamicArray[1][5]
        male_lable_new[7] += dynamicArray[1][8]
        male_lable_new[8] += dynamicArray[1][3]

        var temp = 0
        for (let i = 0; i < male_lable_new.length; i++) 
        {
            temp += male_lable_new[i]
            
        }
        for (let i = 0; i < male_lable_new.length; i++) 
        {
            male_lable_new[i] /= temp    
        }
        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
        type: 'pie',
        data: {
             labels: labels_gender,
            // backgroundColor : ["red","yellow"],
            datasets: [
                {
                    label: labels_descriptions_new[0],
                    backgroundColor: ['rgba(255, 0, 0, 0.5)','rgba(255, 0, 0, 1)'],
                    data: [female_lable_new[0],male_lable_new[0]]
                },
                {
                    label: labels_descriptions_new[1],
                    backgroundColor: ['rgba(0, 128, 0, 0.5)','rgba(0, 128, 0, 1)'],
                    data: [female_lable_new[1],male_lable_new[1]]
                },
                {
                    label: labels_descriptions_new[2],
                    backgroundColor: ['rgba(255, 192, 203, 0.5)','rgba(255, 192, 203,1)'],
                    data: [female_lable_new[2],male_lable_new[2]]
                },
                {
                    label: labels_descriptions_new[3],
                    backgroundColor: ['rgba(128, 128, 128, 0.5)','rgba(128, 128, 128, 1)'],
                    data: [female_lable_new[3],male_lable_new[3]]
                },
                {
                    label: labels_descriptions_new[4],
                    backgroundColor: ['rgba(255, 255, 255, 0.5)','rgba(255, 255, 255,1)'],
                    data: [female_lable_new[4],male_lable_new[4]]
                },
                {
                    label: labels_descriptions_new[5],
                    backgroundColor: ['rgba(0, 0, 0, 0.5)','rgba(0, 0, 0, 1)'],
                    data: [female_lable_new[5],male_lable_new[5]]
                },
                {
                    label: labels_descriptions_new[6],
                    backgroundColor: ['rgba(255, 255, 0, 0.5)','rgba(255, 255, 0,1)'],
                    data: [female_lable_new[6],male_lable_new[6]]
                },
                {
                    label: labels_descriptions_new[7],
                    backgroundColor: ['rgba(125, 55, 77, 0.5)','rgba(125, 55, 77,1)'],
                    data: [female_lable_new[7],male_lable_new[7]]
                },
                {
                    label: labels_descriptions_new[8],
                    backgroundColor: ['rgba(255, 66, 88, 0.5)','rgba(255, 66, 88,1)'],
                    data: [female_lable_new[8],male_lable_new[8]]
                },
            ]
        },
        options: {
            animation: {
            duration: 2000,
            easing: 'easeInOutQuad',
            cutoutPercentage: 0,
        },
        scales: {
            x: {
                stacked: true
            },
            y: {
                stacked: true
            }
        }
        }
    })
        
        var ctx1 = document.getElementById('myChart_sub1').getContext('2d');
        var myChart_sub1 = new Chart(ctx1, {
        type: 'polarArea',
        data: {
             labels: labels_descriptions_new,
            // backgroundColor : ["red","yellow"],
            datasets: [{
            label: 'Female', 
            backgroundColor: ['rgba(255, 0, 0, 0.5)', 'rgba(0, 128, 0, 0.5)', 'rgba(255, 192, 203, 1)', 'rgba(128, 128, 128, 1)', 'rgba(255, 255, 255, 1)', 'rgba(0, 0, 0, 1)', 'rgba(255, 255, 0, 1)', 'rgba(125, 55, 77, 1)', 'rgba(255, 66, 88, 1)'], // 设置颜色数组
            data: female_lable_new 
              
        }]
        },
        options: {
            animation: {
            duration: 2000,
            easing: 'easeInOutQuad',
            cutoutPercentage: 0,
        },
        
        }
    })
        
        var ctx2 = document.getElementById('myChart_sub2').getContext('2d');
            var myChart_sub2 = new Chart(ctx2, {
            type: 'polarArea',
            data: {
                labels: labels_descriptions_new,
                // backgroundColor : ["red","yellow"],
                datasets: [{
                label: 'Male', 
                backgroundColor: ['rgba(255, 0, 0, 0.5)', 'rgba(0, 128, 0, 0.5)', 'rgba(255, 192, 203, 1)', 'rgba(128, 128, 128, 1)', 'rgba(255, 255, 255, 1)', 'rgba(0, 0, 0, 1)', 'rgba(255, 255, 0, 1)', 'rgba(125, 55, 77, 1)', 'rgba(255, 66, 88, 1)'], // 设置颜色数组
                data: male_lable_new 
                
            }]
            },
            options: {
                animation: {
                duration: 2000,
                easing: 'easeInOutQuad',
                cutoutPercentage: 0,
            },
            
            }
        })
        


    }
    else
    {
        var labels_gender = []
        var labels_descriptions = []
        for (let i = 0; i < dataFromServer.length; i++) 
        {
            const element1 = dataFromServer[i][labels[2]]
            const element2 = dataFromServer[i][labels[1]]
            if (!labels_descriptions.includes(element1)) 
            {
                labels_descriptions.push(element1);
            }
            if (!labels_gender.includes(element2)) 
            {
                labels_gender.push(element2);
            }
        }
        labels_gender.pop()
        labels_descriptions_new = ["died",
                                    "Recover",
                                    "transferred to other hosptial",
                                    "transferred to another type of inpatient care institution ",
                                    "transferred to home",
                                    "transferred to ICF",
                                    "transferred to SNF",
                                    "Left AMA",
                                    "Null",
                                    ]

        rows = labels_gender.length
        cols = labels_descriptions.length
        var dynamicArray = new Array(rows);
        for (var i = 0; i < rows; i++) {
            dynamicArray[i] = new Array(cols);
        }        
        for (let i = 0; i < rows; i++) {
            for (let j = 0; j < cols; j++) {
                dynamicArray[i][j] = 0
            } 
        }
        for (let j = 0; j < labels_gender.length; j++) 
        {   
            var temp = 0
            for (let i = 0; i < dataFromServer.length; i++)
            {
                if (dataFromServer[i]["gender"] === labels_gender[j])
                {
                    temp += parseFloat(dataFromServer[i]["count"]) 
                }
            }   
            for (let k = 0; k < labels_descriptions.length; k++)
                {   for (let i = 0; i < dataFromServer.length; i++)
                        {
                            if (dataFromServer[i]['discharge_disposition'] === labels_descriptions[k] &&
                         dataFromServer[i]['gender'] === labels_gender[j])
                         {
                            dynamicArray[j][k] = parseFloat(dataFromServer[i]["count"]) 
                         }

                        }
                }
            for (let i = 0; i < labels_descriptions.length; i++)
            {   if (dynamicArray[j][i] != 0)
                dynamicArray[j][i]/= temp
            }     
        }
        var female_lable_new = new Array(9)
        
        for (let i = 0; i < female_lable_new.length; i++) {
            female_lable_new[i] = 0
        }
        female_lable_new[0] += dynamicArray[0][5]
        female_lable_new[1] += dynamicArray[0][0]
        female_lable_new[2] += dynamicArray[0][4] + dynamicArray[0][6] 
        female_lable_new[3] += dynamicArray[0][7] 
        female_lable_new[4] += dynamicArray[0][2] + dynamicArray[0][14]
        female_lable_new[5] += dynamicArray[0][8]
        female_lable_new[6] += dynamicArray[0][1]
        female_lable_new[7] += dynamicArray[0][9]
        female_lable_new[8] += dynamicArray[0][3]
        var temp = 0
        for (let i = 0; i < female_lable_new.length; i++) 
        {
            temp += female_lable_new[i]
            
        }
        for (let i = 0; i < female_lable_new.length; i++) 
        {
            female_lable_new[i] /= temp    
        }
        var male_lable_new = new Array(9)
        for (let i = 0; i < male_lable_new.length; i++) {
            male_lable_new[i] = 0
        }
        male_lable_new[0] += dynamicArray[1][5]
        male_lable_new[1] += dynamicArray[1][0]
        male_lable_new[2] += dynamicArray[1][4] + dynamicArray[1][6] 
        male_lable_new[3] += dynamicArray[1][7] 
        male_lable_new[4] += dynamicArray[1][2] + dynamicArray[1][14]
        male_lable_new[5] += dynamicArray[1][8]
        male_lable_new[6] += dynamicArray[1][1]
        male_lable_new[7] += dynamicArray[1][9]
        male_lable_new[8] += dynamicArray[1][3]
        var temp = 0
        for (let i = 0; i < male_lable_new.length; i++) 
        {
            temp += male_lable_new[i]
            
        }
        for (let i = 0; i < male_lable_new.length; i++) 
        {
            male_lable_new[i] /= temp    
        }
        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
        type: 'pie',
        data: {
             labels: labels_gender,
            datasets: [
                {
                    label: labels_descriptions_new[0],
                    backgroundColor: ['rgba(255, 0, 0, 0.5)','rgba(255, 0, 0, 1)'],
                    data: [female_lable_new[0],male_lable_new[0]]
                },
                {
                    label: labels_descriptions_new[1],
                    backgroundColor: ['rgba(0, 128, 0, 0.5)','rgba(0, 128, 0, 1)'],
                    data: [female_lable_new[1],male_lable_new[1]]
                },
                {
                    label: labels_descriptions_new[2],
                    backgroundColor: ['rgba(255, 192, 203, 0.5)','rgba(255, 192, 203,1)'],
                    data: [female_lable_new[2],male_lable_new[2]]
                },
                {
                    label: labels_descriptions_new[3],
                    backgroundColor: ['rgba(128, 128, 128, 0.5)','rgba(128, 128, 128, 1)'],
                    data: [female_lable_new[3],male_lable_new[3]]
                },
                {
                    label: labels_descriptions_new[4],
                    backgroundColor: ['rgba(255, 255, 255, 0.5)','rgba(255, 255, 255,1)'],
                    data: [female_lable_new[4],male_lable_new[4]]
                },
                {
                    label: labels_descriptions_new[5],
                    backgroundColor: ['rgba(0, 0, 0, 0.5)','rgba(0, 0, 0, 1)'],
                    data: [female_lable_new[5],male_lable_new[5]]
                },
                {
                    label: labels_descriptions_new[6],
                    backgroundColor: ['rgba(255, 255, 0, 0.5)','rgba(255, 255, 0,1)'],
                    data: [female_lable_new[6],male_lable_new[6]]
                },
                {
                    label: labels_descriptions_new[7],
                    backgroundColor: ['rgba(21, 22, 0, 0.5)','rgba(21, 22, 0,1)'],
                    data: [female_lable_new[7],male_lable_new[7]]
                },
                {
                    label: labels_descriptions_new[6],
                    backgroundColor: ['rgba(55, 25, 10, 0.5)','rgba(55, 25, 10,1)'],
                    data: [female_lable_new[8],male_lable_new[8]]
                },
            ]
        },
        options: {
            animation: {
            duration: 2000,
            easing: 'easeInOutQuad',
            cutoutPercentage: 0,
        },
        scales: {
            x: {
                stacked: true
            },
            y: {
                stacked: true
            }
        }
        }
    })

    var ctx1 = document.getElementById('myChart_sub1').getContext('2d');
            var myChart_sub1 = new Chart(ctx1, {
            type: 'polarArea',
            data: {
                labels: labels_descriptions_new,
                // backgroundColor : ["red","yellow"],
                datasets: [{
                label: 'Female', 
                backgroundColor: ['rgba(255, 0, 0, 0.5)', 'rgba(0, 128, 0, 0.5)', 'rgba(255, 192, 203, 1)', 'rgba(128, 128, 128, 1)', 'rgba(255, 255, 255, 1)', 'rgba(0, 0, 0, 1)', 'rgba(255, 255, 0, 1)', 'rgba(125, 55, 77, 1)', 'rgba(255, 66, 88, 1)'], // 设置颜色数组
                data: female_lable_new 
                
            }]
            },
            options: {
                animation: {
                duration: 2000,
                easing: 'easeInOutQuad',
                cutoutPercentage: 0,
            },
            
            }
        })
        var ctx2 = document.getElementById('myChart_sub2').getContext('2d');
            var myChart_sub2 = new Chart(ctx2, {
            type: 'polarArea',
            data: {
                labels: labels_descriptions_new,
                // backgroundColor : ["red","yellow"],
                datasets: [{
                label: 'Male', 
                backgroundColor: ['rgba(255, 0, 0, 0.5)', 'rgba(0, 128, 0, 0.5)', 'rgba(255, 192, 203, 1)', 'rgba(128, 128, 128, 1)', 'rgba(255, 255, 255, 1)', 'rgba(0, 0, 0, 1)', 'rgba(255, 255, 0, 1)', 'rgba(125, 55, 77, 1)', 'rgba(255, 66, 88, 1)'], // 设置颜色数组
                data: male_lable_new 
                
            }]
            },
            options: {
                animation: {
                duration: 2000,
                easing: 'easeInOutQuad',
                cutoutPercentage: 0,
            },
            
            }
        })
    
}
</script>











</body>

</html>
