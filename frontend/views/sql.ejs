<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SQL Query Results</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <style>
        body {
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(to right, #a1c4fd, #c2e9fb);
            color: #333;
            text-align: center;
        }
        table {
            width: 80%;
            margin: 20px auto;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #008CBA;
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        .container {
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body>
<div class="container">

    <% if (typeof data != "undefined" && data.length > 0) { %>
        <table>
            <tr>
                <% Object.keys(data[0]).forEach(function(key) { %>
                    <th><%= key %></th>
                <% }); %>
            </tr>
            <% data.forEach(function(row) { %>
                <tr>
                    <% Object.keys(row).forEach(function(key) { %>
                        <td><%= row[key] %></td>
                    <% }); %>
                </tr>
            <% }); %>
        </table>
    <% } else { %>
        <p>No data found or query did not return any results.</p>
    <% } %>
</div>


<div id="chartContainer" style="width: 1800px; height: 700px;
 display: flex; justify-content: center; align-items: center;">
    <canvas id="myChart"></canvas>
</div>

<div id="chartContainer2" style="width: 1800px; height: 700px; margin-top: 300px;
 display: flex; justify-content: center; align-items: center;">
    <canvas id="myChart_sub1"></canvas>
    <canvas id="myChart_sub2"></canvas>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    try
    {
        var dataFromServer = JSON.parse('<%- JSON.stringify(data) %>'.replace(/\r/g,""));
       
    }catch(error)
    {
        var dataFromServer = '<%- JSON.stringify(data) %>'.replace(/\\n|"/g, " ")
        .replace(/\s+/g, " ").replace(/"\s+/g, '"').replace(/(\w+)\s*:/g, '"$1":')
        .replace(/:\s*([^,{\[]+)/g, ':"$1"').replace(/only"/g, 'only')
        .replace(/(\d+)\}"/g, '$1"}')
        .replace(/(\d+)\}]"/g, '$1"}]')
        .replace(/ hospic ,/g, ' hospic ",');
        dataFromServer =  JSON.parse(dataFromServer)
    }finally
    {
        labels = Object.keys(dataFromServer[0]);
        var values = []
        var yValues = []
        for (let i = 0; i < dataFromServer.length; i++) 
            {
                const element = dataFromServer[i][labels[2]];
                const yelement = dataFromServer[i][labels[0]];
                values.push(element)
                yValues.push(yelement)
            }
    }
    if(labels[0]==="race" && labels[1] ==='race_count')
    {
        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'pie', 
            data: {
                labels: yValues, 
                datasets: [{
                    label:labels[0], 
                    data: values, 
                    backgroundColor: ['white','black','orange',
                        'red','yellow','blue',], 
                    borderColor: 'rgba(54, 162, 235, 1)', 
                    borderWidth: 1 
                }]
            },
            options: {
       
        animation: {
            duration: 2000,
            easing: 'easeInOutQuad'
        }
    }
    });    
}
    else if (labels[0]==="male_count")
{  var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'bar', 
            data: {
                labels: ['male','female'], 
                datasets: [{
                    label:'male and female ratio', 
                    data: [0.47,0.53], 
                    backgroundColor: ['white','black','orange',
                        'red','yellow','blue',], 
                    borderColor: 'rgba(54, 162, 235, 1)', 
                    borderWidth: 1 
                }]
            },
            options: {
       
        animation: {
            duration: 2000,
            easing: 'easeInOutQuad'
        }
    }
    });    

}
    else if (labels[0]==="race" && labels[1] ==="descriptions")
    {   

        var labels_descriptions = []
        var labels_race = []
        for (let i = 0; i < dataFromServer.length; i++) 
        {
            const element1 = dataFromServer[i][labels[1]]
            const element2 = dataFromServer[i][labels[0]]
            if (!labels_descriptions.includes(element1)) 
            {
                labels_descriptions.push(element1);
            }
            if (!labels_race.includes(element2)) 
            {
                labels_race.push(element2);
            }
        }

        var rows = labels_race.length;
        var cols = labels_descriptions.length;
        var dynamicArray = new Array(rows);
        for (var i = 0; i < rows; i++) {
            dynamicArray[i] = new Array(cols);
        }        
        for (let i = 0; i < rows; i++) {
            for (let j = 0; j < cols; j++) {
                dynamicArray[i][j] = 0
                
            } 
        }
        for (let j = 0; j < labels_race.length; j++) 
        {   
            var temp = 0
            for (let i = 0; i < dataFromServer.length; i++)
            {
                if (dataFromServer[i]["race"] === labels_race[j])
                {
                    temp += dataFromServer[i]["patient_count"] 
                }
            }   
            for (let k = 0; k < labels_descriptions.length; k++)
                {   for (let i = 0; i < dataFromServer.length; i++)
                        {
                            if (dataFromServer[i]['descriptions'] == labels_descriptions[k] &&
                         dataFromServer[i]['race'] == labels_race[j])
                         {
                            dynamicArray[j][k] = dataFromServer[i]["patient_count"] 
                         }

                        }
                }
            for (let i = 0; i < labels_descriptions.length; i++)
            {   if (dynamicArray[j][i] != 0)
                dynamicArray[j][i]/= temp
            }     
        } 
        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
        type: 'radar',
        data: {
            labels: labels_race,
            datasets: [
                {
                    label: labels_descriptions[0],
                    backgroundColor: 'rgba(0, 128, 0, 0.5)',
                    data: dynamicArray.map(row => row[0])
                },
                {
                    label: labels_descriptions[1],
                    backgroundColor: 'rgba(255, 0, 0, 0.5)',
                    data: dynamicArray.map(row => row[1])
                },
                {
                    label: labels_descriptions[2],
                    backgroundColor: 'rgba(255, 192, 203, 0.5)',
                    data: dynamicArray.map(row => row[2])
                },
                {
                    label: labels_descriptions[3],
                    backgroundColor: 'rgba(128, 128, 128, 0.5)',
                    data: dynamicArray.map(row => row[3])
                },
                {
                    label: labels_descriptions[4],
                    backgroundColor: 'rgba(255, 255, 255, 0.5)',
                    data: dynamicArray.map(row => row[4])
                },
                {
                    label: labels_descriptions[5],
                    backgroundColor: 'rgba(0, 0, 0, 0.5)',
                    data: dynamicArray.map(row => row[5])
                },
                {
                    label: labels_descriptions[6],
                    backgroundColor: 'rgba(255, 255, 0, 0.5)',
                    data: dynamicArray.map(row => row[6])
                },
                {
                    label: labels_descriptions[7],
                    backgroundColor: 'rgba(255, 165, 0, 0.5)',
                    data: dynamicArray.map(row => row[7])
                }
            ]
        },
        options: {
            animation: {
            duration: 2000,
            easing: 'easeInOutQuad'
        },
        scales: {
            x: {
                stacked: true
            },
            y: {
                stacked: true
            }
        }
        }
    });
    }
    else if (labels[0]==="gender" && labels[1] !== "descriptions")
    {
        var labels_gender = []
        var labels_descriptions = []
        for (let i = 0; i < dataFromServer.length; i++) 
        {
            const element1 = dataFromServer[i][labels[1]]
            const element2 = dataFromServer[i][labels[0]]
            if (!labels_descriptions.includes(element1)) 
            {
                labels_descriptions.push(element1);
            }
            if (!labels_gender.includes(element2)) 
            {
                labels_gender.push(element2);
            }
        }
        if (labels_descriptions.length === 19)
        {
            labels_gender.pop()
            labels_descriptions_new = ["died",
                                        "Recover",
                                        "transferred  to other hosptial",
                                        "transferred to home",
                                        "transferred to ICF",
                                        "transferred to SNF",
                                        "Left AMA",
                                        ]
        
        rows = labels_gender.length
        cols = labels_descriptions.length
        var dynamicArray = new Array(rows);
        for (var i = 0; i < rows; i++) {
            dynamicArray[i] = new Array(cols);
        }        
        for (let i = 0; i < rows; i++) {
            for (let j = 0; j < cols; j++) {
                dynamicArray[i][j] = 0
            } 
        }
        for (let j = 0; j < labels_gender.length; j++) 
        {   
            var temp = 0
            for (let i = 0; i < dataFromServer.length; i++)
            {
                if (dataFromServer[i]["gender"] === labels_gender[j])
                {
                    temp += parseFloat(dataFromServer[i]["patient_count"]) 
                }
            }   
            for (let k = 0; k < labels_descriptions.length; k++)
                {   for (let i = 0; i < dataFromServer.length; i++)
                        {
                            if (dataFromServer[i]['descriptions'] === labels_descriptions[k] &&
                         dataFromServer[i]['gender'] === labels_gender[j])
                         {
                            dynamicArray[j][k] = parseFloat(dataFromServer[i]["patient_count"]) 
                         }

                        }
                }
                console.log(temp)
            for (let i = 0; i < labels_descriptions.length; i++)
            {   if (dynamicArray[j][i] != 0)
                dynamicArray[j][i]/= temp
            }     
        }
        var female_lable_new = new Array(7)
        for (let i = 0; i < female_lable_new.length; i++) {
            female_lable_new[i] = 0
        }
        female_lable_new[0] += dynamicArray[0][12]
        female_lable_new[1] += dynamicArray[0][2]
        female_lable_new[2] += dynamicArray[0][3] +dynamicArray[0][4]
        female_lable_new[3] += dynamicArray[0][5] + dynamicArray[0][6]
        female_lable_new[4] += dynamicArray[0][7]
        female_lable_new[5] += dynamicArray[0][8]
        female_lable_new[6] += dynamicArray[0][15]
        var temp = 0
        console.log(dynamicArray)
        console.log(labels_descriptions)
        for (let i = 0; i < female_lable_new.length; i++) 
        {
            temp += female_lable_new[i]
            
        }
        for (let i = 0; i < female_lable_new.length; i++) 
        {
            female_lable_new[i] /= temp    
        }
        var male_lable_new = new Array(7)
        for (let i = 0; i < male_lable_new.length; i++) {
            male_lable_new[i] = 0
        }
        male_lable_new[0] += dynamicArray[1][12]
        male_lable_new[1] += dynamicArray[1][2]
        male_lable_new[2] += dynamicArray[1][3] +dynamicArray[1][4]
        male_lable_new[3] += dynamicArray[1][5] + dynamicArray[1][6]
        male_lable_new[4] += dynamicArray[1][7]
        male_lable_new[5] += dynamicArray[1][8]
        male_lable_new[6] += dynamicArray[1][15]
        var temp = 0
        for (let i = 0; i < male_lable_new.length; i++) 
        {
            temp += male_lable_new[i]
            
        }
        for (let i = 0; i < male_lable_new.length; i++) 
        {
            male_lable_new[i] /= temp    
        }
        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
        type: 'pie',
        data: {
             labels: labels_gender,
            // backgroundColor : ["red","yellow"],
            datasets: [
                {
                    label: labels_descriptions_new[0],
                    backgroundColor: ['rgba(255, 0, 0, 0.5)','rgba(255, 0, 0, 1)'],
                    data: [female_lable_new[0],male_lable_new[0]]
                },
                {
                    label: labels_descriptions_new[1],
                    backgroundColor: ['rgba(0, 128, 0, 0.5)','rgba(0, 128, 0, 1)'],
                    data: [female_lable_new[1],male_lable_new[1]]
                },
                {
                    label: labels_descriptions_new[2],
                    backgroundColor: ['rgba(255, 192, 203, 0.5)','rgba(255, 192, 203,1)'],
                    data: [female_lable_new[2],male_lable_new[2]]
                },
                {
                    label: labels_descriptions_new[3],
                    backgroundColor: ['rgba(128, 128, 128, 0.5)','rgba(128, 128, 128, 1)'],
                    data: [female_lable_new[3],male_lable_new[3]]
                },
                {
                    label: labels_descriptions_new[4],
                    backgroundColor: ['rgba(255, 255, 255, 0.5)','rgba(255, 255, 255,1)'],
                    data: [female_lable_new[4],male_lable_new[4]]
                },
                {
                    label: labels_descriptions_new[5],
                    backgroundColor: ['rgba(0, 0, 0, 0.5)','rgba(0, 0, 0, 1)'],
                    data: [female_lable_new[5],male_lable_new[5]]
                },
                {
                    label: labels_descriptions_new[6],
                    backgroundColor: ['rgba(255, 255, 0, 0.5)','rgba(255, 255, 0,1)'],
                    data: [female_lable_new[6],male_lable_new[6]]
                },
            ]
        },
        options: {
            animation: {
            duration: 2000,
            easing: 'easeInOutQuad',
            cutoutPercentage: 0,
        },
        scales: {
            x: {
                stacked: true
            },
            y: {
                stacked: true
            }
        }
        }
    })
    var ctx1 = document.getElementById('myChart_sub1').getContext('2d');
            var myChart_sub1 = new Chart(ctx1, {
            type: 'polarArea',
            data: {
                labels: labels_descriptions_new,
                // backgroundColor : ["red","yellow"],
                datasets: [{
                label: 'Female', 
                backgroundColor: ['rgba(255, 0, 0, 0.5)', 'rgba(0, 128, 0, 0.5)', 'rgba(255, 192, 203, 1)', 'rgba(128, 128, 128, 1)', 'rgba(255, 255, 255, 1)', 'rgba(0, 0, 0, 1)', 'rgba(255, 255, 0, 1)', 'rgba(125, 55, 77, 1)', 'rgba(255, 66, 88, 1)'], // 设置颜色数组
                data: female_lable_new 
                
            }]
            },
            options: {
                animation: {
                duration: 2000,
                easing: 'easeInOutQuad',
                cutoutPercentage: 0,
            },
            
            }
        })
        var ctx2 = document.getElementById('myChart_sub2').getContext('2d');
            var myChart_sub2 = new Chart(ctx2, {
            type: 'polarArea',
            data: {
                labels: labels_descriptions_new,
                // backgroundColor : ["red","yellow"],
                datasets: [{
                label: 'Male', 
                backgroundColor: ['rgba(255, 0, 0, 0.5)', 'rgba(0, 128, 0, 0.5)', 'rgba(255, 192, 203, 1)', 'rgba(128, 128, 128, 1)', 'rgba(255, 255, 255, 1)', 'rgba(0, 0, 0, 1)', 'rgba(255, 255, 0, 1)', 'rgba(125, 55, 77, 1)', 'rgba(255, 66, 88, 1)'], // 设置颜色数组
                data: male_lable_new 
                
            }]
            },
            options: {
                animation: {
                duration: 2000,
                easing: 'easeInOutQuad',
                cutoutPercentage: 0,
            },
            
            }
        })
            

        }
        else if (labels_descriptions.length === 17)
        {
            labels_gender.pop()
            labels_descriptions_new = ["Court/Law Enforcement",
                                        "Emergency Room",
                                        "Unknow",
                                        "Physician Referral",
                                        "Transfer from a Skilled Nursing Facility (SNF)",
                                        "Transfer from another health care facility",
                                        "Clinic Referral",
                                        "HMO Referral",
                                        "Transfer from a hospital"]
            
        rows = labels_gender.length
        cols = labels_descriptions.length
        var dynamicArray = new Array(rows);
        for (var i = 0; i < rows; i++) {
            dynamicArray[i] = new Array(cols);
        }        
        for (let i = 0; i < rows; i++) {
            for (let j = 0; j < cols; j++) {
                dynamicArray[i][j] = 0
            } 
        }
        for (let j = 0; j < labels_gender.length; j++) 
        {   
            var temp = 0
            for (let i = 0; i < dataFromServer.length; i++)
            {
                if (dataFromServer[i]["gender"] === labels_gender[j])
                {
                    temp += parseFloat(dataFromServer[i]["patient_count"]) 
                }
            }   
            for (let k = 0; k < labels_descriptions.length; k++)
                {   for (let i = 0; i < dataFromServer.length; i++)
                        {
                            if (dataFromServer[i]['descriptions'] === labels_descriptions[k] &&
                         dataFromServer[i]['gender'] === labels_gender[j])
                         {
                            dynamicArray[j][k] = (dataFromServer[i]["patient_count"]) 
                         }

                        }
                }
            for (let i = 0; i < labels_descriptions.length; i++)
            {   if (dynamicArray[j][i] != 0)
                dynamicArray[j][i]/= temp
            }     
        }
        console.log(dynamicArray)
        var female_lable_new = new Array(9)
        for (let i = 0; i < female_lable_new.length; i++) {
            female_lable_new[i] = 0
        }
        female_lable_new[0] += dynamicArray[0][0]
        female_lable_new[1] += dynamicArray[0][1]
        female_lable_new[2] += dynamicArray[0][15]
        female_lable_new[3] += dynamicArray[0][5] 
        female_lable_new[4] += dynamicArray[0][7]
        female_lable_new[5] += dynamicArray[0][9]
        female_lable_new[6] += dynamicArray[0][12]
        female_lable_new[7] += dynamicArray[0][13]
        female_lable_new[8] += dynamicArray[0][16]
        var temp = 0

        for (let i = 0; i < female_lable_new.length; i++) 
        {
            temp += female_lable_new[i]
            
        }
        for (let i = 0; i < female_lable_new.length; i++) 
        {
            female_lable_new[i] /= temp    
        }
        var male_lable_new = new Array(9)
        for (let i = 0; i < male_lable_new.length; i++) {
            male_lable_new[i] = 0
        }
        male_lable_new[0] += dynamicArray[1][0]
        male_lable_new[1] += dynamicArray[1][1]
        male_lable_new[2] += dynamicArray[1][15] 
        male_lable_new[3] += dynamicArray[1][5] 
        male_lable_new[4] += dynamicArray[1][7]
        male_lable_new[5] += dynamicArray[1][9]
        male_lable_new[6] += dynamicArray[1][12]
        male_lable_new[7] += dynamicArray[1][13]
        male_lable_new[8] += dynamicArray[1][16]

        var temp = 0
        for (let i = 0; i < male_lable_new.length; i++) 
        {
            temp += male_lable_new[i]
            
        }
        for (let i = 0; i < male_lable_new.length; i++) 
        {
            male_lable_new[i] /= temp    
        }
        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
        type: 'pie',
        data: {
             labels: labels_gender,
            // backgroundColor : ["red","yellow"],
            datasets: [
                {
                    label: labels_descriptions_new[0],
                    backgroundColor: ['rgba(255, 0, 0, 0.5)','rgba(255, 0, 0, 1)'],
                    data: [female_lable_new[0],male_lable_new[0]]
                },
                {
                    label: labels_descriptions_new[1],
                    backgroundColor: ['rgba(0, 128, 0, 0.5)','rgba(0, 128, 0, 1)'],
                    data: [female_lable_new[1],male_lable_new[1]]
                },
                {
                    label: labels_descriptions_new[2],
                    backgroundColor: ['rgba(255, 192, 203, 0.5)','rgba(255, 192, 203,1)'],
                    data: [female_lable_new[2],male_lable_new[2]]
                },
                {
                    label: labels_descriptions_new[3],
                    backgroundColor: ['rgba(128, 128, 128, 0.5)','rgba(128, 128, 128, 1)'],
                    data: [female_lable_new[3],male_lable_new[3]]
                },
                {
                    label: labels_descriptions_new[4],
                    backgroundColor: ['rgba(255, 255, 255, 0.5)','rgba(255, 255, 255,1)'],
                    data: [female_lable_new[4],male_lable_new[4]]
                },
                {
                    label: labels_descriptions_new[5],
                    backgroundColor: ['rgba(0, 0, 0, 0.5)','rgba(0, 0, 0, 1)'],
                    data: [female_lable_new[5],male_lable_new[5]]
                },
                {
                    label: labels_descriptions_new[6],
                    backgroundColor: ['rgba(255, 255, 0, 0.5)','rgba(255, 255, 0,1)'],
                    data: [female_lable_new[6],male_lable_new[6]]
                },
                {
                    label: labels_descriptions_new[7],
                    backgroundColor: ['rgba(125, 55, 77, 0.5)','rgba(125, 55, 77,1)'],
                    data: [female_lable_new[7],male_lable_new[7]]
                },
                {
                    label: labels_descriptions_new[8],
                    backgroundColor: ['rgba(255, 66, 88, 0.5)','rgba(255, 66, 88,1)'],
                    data: [female_lable_new[8],male_lable_new[8]]
                },
            ]
        },
        options: {
            animation: {
            duration: 2000,
            easing: 'easeInOutQuad',
            cutoutPercentage: 0,
        },
        scales: {
            x: {
                stacked: true
            },
            y: {
                stacked: true
            }
        }
        }
    })
        
        var ctx1 = document.getElementById('myChart_sub1').getContext('2d');
        var myChart_sub1 = new Chart(ctx1, {
        type: 'polarArea',
        data: {
             labels: labels_descriptions_new,
            // backgroundColor : ["red","yellow"],
            datasets: [{
            label: 'Female', 
            backgroundColor: ['rgba(255, 0, 0, 0.5)', 'rgba(0, 128, 0, 0.5)', 'rgba(255, 192, 203, 1)', 'rgba(128, 128, 128, 1)', 'rgba(255, 255, 255, 1)', 'rgba(0, 0, 0, 1)', 'rgba(255, 255, 0, 1)', 'rgba(125, 55, 77, 1)', 'rgba(255, 66, 88, 1)'], // 设置颜色数组
            data: female_lable_new 
              
        }]
        },
        options: {
            animation: {
            duration: 2000,
            easing: 'easeInOutQuad',
            cutoutPercentage: 0,
        },
        
        }
    })
        
        var ctx2 = document.getElementById('myChart_sub2').getContext('2d');
            var myChart_sub2 = new Chart(ctx2, {
            type: 'polarArea',
            data: {
                labels: labels_descriptions_new,
                // backgroundColor : ["red","yellow"],
                datasets: [{
                label: 'Male', 
                backgroundColor: ['rgba(255, 0, 0, 0.5)', 'rgba(0, 128, 0, 0.5)', 'rgba(255, 192, 203, 1)', 'rgba(128, 128, 128, 1)', 'rgba(255, 255, 255, 1)', 'rgba(0, 0, 0, 1)', 'rgba(255, 255, 0, 1)', 'rgba(125, 55, 77, 1)', 'rgba(255, 66, 88, 1)'], // 设置颜色数组
                data: male_lable_new 
                
            }]
            },
            options: {
                animation: {
                duration: 2000,
                easing: 'easeInOutQuad',
                cutoutPercentage: 0,
            },
            
            }
        })
}  

}
    else if (labels[0] === "race" && labels[1] === "gender")
    {   
        function create2DArray(rows, cols, initialValue) {
        var array = [];
        for (var i = 0; i < rows; i++) {
            array[i] = [];
            for (var j = 0; j < cols; j++) {
            array[i][j] = initialValue;
            }
        }
        return array;
        }

        var labels_race = []
        var labels_gender = []
        dataFromServer.pop()

        for (let i = 0; i < dataFromServer.length; i++) {
            if(! labels_race.includes(dataFromServer[i]["race"]))
            {
                labels_race.push(dataFromServer[i]["race"])
            }
            if(! labels_gender.includes(dataFromServer[i]["gender"]))
            {
                labels_gender.push(dataFromServer[i]["gender"])
            }
            
        }
        var dynamicArray = create2DArray(2,6,0)
        
        for (let i = 0; i < dynamicArray.length; i++) {
            for (let j = 0; j < dynamicArray[i].length; j++)
            {
                for (let k = 0; k < dataFromServer.length; k++) {
                    if (labels_gender[i] == dataFromServer[k]['gender']
                    && labels_race[j] == dataFromServer[k]['race'])
                        dynamicArray[i][j] = dataFromServer[k]["patient_count"]
                    
                }
                
            }
            
        }   
        console.log(dynamicArray)
        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
        type: 'pie',
        data: {
             labels: labels_gender,
            // backgroundColor : ["red","yellow"],
            datasets: [
                {
                    label: labels_race[0],
                    backgroundColor: ['rgba(255, 0, 0, 0.5)','rgba(255, 0, 0, 1)'],
                    data: dynamicArray.map(row => row[0])
                },
                {
                    label: labels_race[1],
                    backgroundColor: ['rgba(0, 128, 0, 0.5)','rgba(0, 128, 0, 1)'],
                    data: dynamicArray.map(row => row[1])
                },
                {
                    label: labels_race[2],
                    backgroundColor: ['rgba(255, 192, 203, 0.5)','rgba(255, 192, 203,1)'],
                    data: dynamicArray.map(row => row[2])
                },
                {
                    label: labels_race[3],
                    backgroundColor: ['rgba(128, 128, 128, 0.5)','rgba(128, 128, 128, 1)'],
                    data: dynamicArray.map(row => row[3])
                },
                {
                    label: labels_race[4],
                    backgroundColor: ['rgba(255, 255, 255, 0.5)','rgba(255, 255, 255,1)'],
                    data: dynamicArray.map(row => row[4])
                },
                {
                    label: labels_race[5],
                    backgroundColor: ['rgba(0, 0, 0, 0.5)','rgba(0, 0, 0, 1)'],
                    data: dynamicArray.map(row => row[5])
                },
            ]
        },
        options: {
            animation: {
            duration: 2000,
            easing: 'easeInOutQuad',
            cutoutPercentage: 0,
        },
        scales: {
            x: {
                stacked: true
            },
            y: {
                stacked: true
            }
        }
        }
    })


    }
    else
    {
        dataFromServer.pop()
        console.log(dataFromServer)
        var labels_gender = []
        var labels_descriptions = []
        for (let i = 0; i < dataFromServer.length; i++) 
        {
            const element1 = dataFromServer[i][labels[1]]
            const element2 = dataFromServer[i][labels[0]]
            if (!labels_descriptions.includes(element1)) 
            {
                labels_descriptions.push(element1);
            }
            if (!labels_gender.includes(element2)) 
            {
                labels_gender.push(element2);
            }
        }
    
        labels_descriptions_new = ["died",
                                    "Recover",
                                    "transferred to other hosptial",
                                    "transferred to another type of inpatient care institution ",
                                    "transferred to home",
                                    "transferred to ICF",
                                    "transferred to SNF",
                                    "Left AMA",
                                    "Null",
                                    ]
        
        rows = labels_gender.length
        cols = labels_descriptions.length
        var dynamicArray = new Array(rows);
        for (var i = 0; i < rows; i++) {
            dynamicArray[i] = new Array(cols);
        }        
        for (let i = 0; i < rows; i++) {
            for (let j = 0; j < cols; j++) {
                dynamicArray[i][j] = 0
            } 
        }
        for (let j = 0; j < labels_gender.length; j++) 
        {   
            var temp = 0
            for (let i = 0; i < dataFromServer.length; i++)
            {
                if (dataFromServer[i]["gender"] === labels_gender[j])
                {
                    temp += parseFloat(dataFromServer[i]["patient_count"]) 
                }
            }   
            for (let k = 0; k < labels_descriptions.length; k++)
                {   for (let i = 0; i < dataFromServer.length; i++)
                        {
                            if (dataFromServer[i]['descriptions'] === labels_descriptions[k] &&
                         dataFromServer[i]['gender'] === labels_gender[j])
                         {
                            dynamicArray[j][k] = parseFloat(dataFromServer[i]["patient_count"]) 
                         }

                        }
                }
                console.log(temp)
            for (let i = 0; i < labels_descriptions.length; i++)
            {   if (dynamicArray[j][i] != 0)
                dynamicArray[j][i]/= temp
            }     
        }
        var female_lable_new = new Array(9)
        
        for (let i = 0; i < female_lable_new.length; i++) {
            female_lable_new[i] = 0
        }
        female_lable_new[0] += dynamicArray[0][10]
        female_lable_new[1] += dynamicArray[0][2]
        female_lable_new[2] += dynamicArray[0][3] 
        female_lable_new[3] += dynamicArray[0][4] 
        female_lable_new[4] += dynamicArray[0][5] + dynamicArray[0][6]
        female_lable_new[5] += dynamicArray[0][7]
        female_lable_new[6] += dynamicArray[0][8]
        female_lable_new[7] += dynamicArray[0][13]
        female_lable_new[8] += dynamicArray[0][15]
        var temp = 0
        for (let i = 0; i < female_lable_new.length; i++) 
        {
            temp += female_lable_new[i]
            
        }
        for (let i = 0; i < female_lable_new.length; i++) 
        {
            female_lable_new[i] /= temp    
        }
        var male_lable_new = new Array(9)
        for (let i = 0; i < male_lable_new.length; i++) {
            male_lable_new[i] = 0
        }
        male_lable_new[0] += dynamicArray[1][10]
        male_lable_new[1] += dynamicArray[1][2]
        male_lable_new[2] += dynamicArray[1][3] 
        male_lable_new[3] += dynamicArray[1][4] 
        male_lable_new[4] += dynamicArray[1][5] + dynamicArray[1][6]
        male_lable_new[5] += dynamicArray[1][7]
        male_lable_new[6] += dynamicArray[1][8]
        male_lable_new[7] += dynamicArray[1][13]
        male_lable_new[8] += dynamicArray[1][15]
        var temp = 0
        for (let i = 0; i < male_lable_new.length; i++) 
        {
            temp += male_lable_new[i]
            
        }
        for (let i = 0; i < male_lable_new.length; i++) 
        {
            male_lable_new[i] /= temp    
        }
        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
        type: 'pie',
        data: {
             labels: labels_gender,
            datasets: [
                {
                    label: labels_descriptions_new[0],
                    backgroundColor: ['rgba(255, 0, 0, 0.5)','rgba(255, 0, 0, 1)'],
                    data: [female_lable_new[0],male_lable_new[0]]
                },
                {
                    label: labels_descriptions_new[1],
                    backgroundColor: ['rgba(0, 128, 0, 0.5)','rgba(0, 128, 0, 1)'],
                    data: [female_lable_new[1],male_lable_new[1]]
                },
                {
                    label: labels_descriptions_new[2],
                    backgroundColor: ['rgba(255, 192, 203, 0.5)','rgba(255, 192, 203,1)'],
                    data: [female_lable_new[2],male_lable_new[2]]
                },
                {
                    label: labels_descriptions_new[3],
                    backgroundColor: ['rgba(128, 128, 128, 0.5)','rgba(128, 128, 128, 1)'],
                    data: [female_lable_new[3],male_lable_new[3]]
                },
                {
                    label: labels_descriptions_new[4],
                    backgroundColor: ['rgba(255, 255, 255, 0.5)','rgba(255, 255, 255,1)'],
                    data: [female_lable_new[4],male_lable_new[4]]
                },
                {
                    label: labels_descriptions_new[5],
                    backgroundColor: ['rgba(0, 0, 0, 0.5)','rgba(0, 0, 0, 1)'],
                    data: [female_lable_new[5],male_lable_new[5]]
                },
                {
                    label: labels_descriptions_new[6],
                    backgroundColor: ['rgba(255, 255, 0, 0.5)','rgba(255, 255, 0,1)'],
                    data: [female_lable_new[6],male_lable_new[6]]
                },
                {
                    label: labels_descriptions_new[7],
                    backgroundColor: ['rgba(21, 22, 0, 0.5)','rgba(21, 22, 0,1)'],
                    data: [female_lable_new[7],male_lable_new[7]]
                },
                {
                    label: labels_descriptions_new[6],
                    backgroundColor: ['rgba(55, 25, 10, 0.5)','rgba(55, 25, 10,1)'],
                    data: [female_lable_new[8],male_lable_new[8]]
                },
            ]
        },
        options: {
            animation: {
            duration: 2000,
            easing: 'easeInOutQuad',
            cutoutPercentage: 0,
        },
        scales: {
            x: {
                stacked: true
            },
            y: {
                stacked: true
            }
        }
        }
    })

    var ctx1 = document.getElementById('myChart_sub1').getContext('2d');
            var myChart_sub1 = new Chart(ctx1, {
            type: 'polarArea',
            data: {
                labels: labels_descriptions_new,
                // backgroundColor : ["red","yellow"],
                datasets: [{
                label: 'Female', 
                backgroundColor: ['rgba(255, 0, 0, 0.5)', 'rgba(0, 128, 0, 0.5)', 'rgba(255, 192, 203, 1)', 'rgba(128, 128, 128, 1)', 'rgba(255, 255, 255, 1)', 'rgba(0, 0, 0, 1)', 'rgba(255, 255, 0, 1)', 'rgba(125, 55, 77, 1)', 'rgba(255, 66, 88, 1)'], // 设置颜色数组
                data: female_lable_new 
                
            }]
            },
            options: {
                animation: {
                duration: 2000,
                easing: 'easeInOutQuad',
                cutoutPercentage: 0,
            },
            
            }
        })
        var ctx2 = document.getElementById('myChart_sub2').getContext('2d');
            var myChart_sub2 = new Chart(ctx2, {
            type: 'polarArea',
            data: {
                labels: labels_descriptions_new,
                // backgroundColor : ["red","yellow"],
                datasets: [{
                label: 'Male', 
                backgroundColor: ['rgba(255, 0, 0, 0.5)', 'rgba(0, 128, 0, 0.5)', 'rgba(255, 192, 203, 1)', 'rgba(128, 128, 128, 1)', 'rgba(255, 255, 255, 1)', 'rgba(0, 0, 0, 1)', 'rgba(255, 255, 0, 1)', 'rgba(125, 55, 77, 1)', 'rgba(255, 66, 88, 1)'], // 设置颜色数组
                data: male_lable_new 
                
            }]
            },
            options: {
                animation: {
                duration: 2000,
                easing: 'easeInOutQuad',
                cutoutPercentage: 0,
            },
            
            }
        })
    
}
</script>
</body>
</html>



